model_full <- lm(rating ~ ., data = attitude)
model_null <- lm(rating ~ 1, data = attitude)
scope = list(lower = model_null, upper = model_full)
step(model_full, scope = list(lower = model_null, upper = model_full))
fit <- step(model_full, scope = list(lower = model_null, upper = model_full))
summary(fit)
aov(model_full ~ fit)
ideal <- lm(formula = rating ~ complaints + learning, data = attitude)
aov(model_full ~ ideal)
aov(model_full,ideal)
anova(model_full,ideal)
anova(model_full, fit)
rm(LifeCycleSavings)
df <- LifeCycleSavings
LifeCycleSavings <- LifeCycleSavings
LifeCycleSavings <- LifeCycleSavings
model_full <- lm(sr ~ (.)^2, data = LifeCycleSavings)
library(ggplot2)
data(swiss)
str(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
geom_point() +
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
theme(axis.text = element_text(size =25),
axis.title = element_text(size = 25, face = ‘bold’)  +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
theme(axis.text = element_text(size =25),
axis.title = element_text(size = 25, face = ‘bold’)  +
geom_smooth(method = 'lm')
axis.title = element_text(size = 25, face = 'bold’)  +
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
theme(axis.text = element_text(size =25), axis.title = element_text(size = 25, face = 'bold'))  +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination)) +
geom_histogram()
ggplot(swiss, aes(x = Education)) +
geom_histogram()
ggplot(swiss, aes(x = log(Education))) +
geom_histogram()
df <- mtcars[,c(1,3)]
fit <- lm(scale(df[,1]) ~scale(df[,2]))
fit$coefficients
df <- mtcars[,c(1,3)]
fit <- lm(scale(df[,1]) ~scale(df[,2]))
fit$coefficients
x <- mtcars[,c(1,3)]
x < - scale(x)
x <- mtcars[,c(1,3)]
x < - scale(x, center = T, scale = T)
View(x)
x <- scale (x,center= TRUE, scale=TRUE)
x <- mtcars[,c(1,3)]
x < - scale (x, center = T, scale = T)
x <- scale (x, center = T, scale = T)
x <- mtcars[,c(1,3)]
x <- scale (x)
fit <- lm(x[,1] ~ x[,2])
fit$coefficients
fit <- lm(x[,1] ~ x[,2])$coefficients
return(fit)
print(fit)
beta.coef <- function(x){
x <- scale (x)
fit <- lm(x[,1] ~ x[,2])
return(fit$coefficients)}
beta.coef(mtcars[,c(1,3)])
importance_calc <- beta.coef <- function(x){
x <-scale(x)
return(lm(x[,1] ~ x[,2])$coefficients)}
importance_calc(mtcars[,c(1,3)])
normality.test <- function(x){
res <- vector(length = length(x))
for(i in 1:length(x)){
res[i] <- shapiro.test(x[[i]])$p.value
}
names(res) <- names(x)
res
}
res <- vector(length = length(x))
normality.test(mtcars[,1:6])
return(c)
normality.test <- function(x){
c <- vector(length = length(x))
for(i in 1:length(x)){
c[i] <- shapiro.test(x[[i]])$p.value
}
names(c) <- names(x)
return(c)
}
normality.test <- function(x){
c <- vector(length = length(x))
for(i in 1:length(x)){
c[i] <- shapiro.test(x[[i]])$p.value
}
names(c) <- names(x)
return(c)
}
normality.test(mtcars[,1:6])
return(c)}
normality.test <- function(x){
c <- vector(length = length(x))
for(i in 1:length(x)){
c[i] <- shapiro.test(x[[i]])$p.value}
names(c) <- names(x)
return(c)}
normality.test(mtcars[,1:6])
library(gvlma)
install.packages(gvlma)
install.packages('gvlma')
library(gvlma)
y <- read.csv(url('https://stepic.org/media/attachments/lesson/12088/homosc.csv'))
x <- lm(DV ~ IV, data = y)
a <- gvlma(x)
summary(a)
resid.norm <- function (fit) {
res <- fit$resid #заносим в переменную значения остатков из модели fit
s <- shapiro.test(res)$p # заносим в переменную s значение П уровня значимости полученное в регресионной модели fit
color <- "" # объявляем переменную для цвета заливки графика
ifelse(s>0.05, color <-  "green", color <- "red") # если П уровень больше 5% , то цвет зеленый, если наоборот , то красный
plot <- ggplot(as.data.frame(fit$model), aes(x = res)) + # параметр as.data.frame(fit$model) делает из данных в нашей регресионной модели ДатаФрейм
geom_histogram(binwidth = 1, fill = color, col = 'black') # параметр fill = color закрашивает нашу гистрограмму в зависимости от П уровня , согласно условия выше
return(plot) # возвращаем наш график
}
resid.norm <- function (fit) {
res <- fit$resid #заносим в переменную значения остатков из модели fit
s <- shapiro.test(res)$p # заносим в переменную s значение П уровня значимости полученное в регресионной модели fit
color <- "" # объявляем переменную для цвета заливки графика
ifelse(s>0.05, color <-  "green", color <- "red") # если П уровень больше 5% , то цвет зеленый, если наоборот , то красный
plot <- ggplot(as.data.frame(fit$model), aes(x = res)) + # параметр as.data.frame(fit$model) делает из данных в нашей регресионной модели ДатаФрейм
geom_histogram(binwidth = 1, fill = color, col = 'black') # параметр fill = color закрашивает нашу гистрограмму в зависимости от П уровня , согласно условия выше
return(plot) # возвращаем наш график
}
resid.norm(resid.norm <- function (fit) {
res <- fit$resid #заносим в переменную значения остатков из модели fit
s <- shapiro.test(res)$p # заносим в переменную s значение П уровня значимости полученное в регресионной модели fit
color <- "" # объявляем переменную для цвета заливки графика
ifelse(s>0.05, color <-  "green", color <- "red") # если П уровень больше 5% , то цвет зеленый, если наоборот , то красный
plot <- ggplot(as.data.frame(fit$model), aes(x = res)) + # параметр as.data.frame(fit$model) делает из данных в нашей регресионной модели ДатаФрейм
geom_histogram(binwidth = 1, fill = color, col = 'black') # параметр fill = color закрашивает нашу гистрограмму в зависимости от П уровня , согласно условия выше
return(plot) # возвращаем наш график
})
resid.norm(resid.norm <- function (fit) {
res <- fit$resid #заносим в переменную значения остатков из модели fit
s <- shapiro.test(res)$p # заносим в переменную s значение П уровня значимости полученное в регресионной модели fit
color <- "" # объявляем переменную для цвета заливки графика
ifelse(s>0.05, color <-  "green", color <- "red") # если П уровень больше 5% , то цвет зеленый, если наоборот , то красный
plot <- ggplot(as.data.frame(fit$model), aes(x = res)) + # параметр as.data.frame(fit$model) делает из данных в нашей регресионной модели ДатаФрейм
geom_histogram(binwidth = 1, fill = color, col = 'black') # параметр fill = color закрашивает нашу гистрограмму в зависимости от П уровня , согласно условия выше
return(plot) # возвращаем наш график
})
fit <- lm(mpg ~ disp, mtcars)
resid.norm(fit)
resid.norm <- function (fit) {
r <- fit$resid
p <- shapiro.test(r)$p
ifelse(s>0.05, color <-  "green", color <- "red")
plot <- ggplot(as.data.frame(fit$model), aes(x = res)) +
geom_histogram()
return(plot)
}
fit <- lm(mpg ~ disp, mtcars)
resid.norm(fit)
resid.norm <- function (fit) {
r <- fit$resid
p <- shapiro.test(r)$p
ifelse(p>0.05, color <-  "green", color <- "red")
plot <- ggplot(as.data.frame(fit$model), aes(x = res)) +
geom_histogram()
return(plot)
}
fit <- lm(mpg ~ disp, mtcars)
resid.norm(fit)
resid.norm <- function (fit) {
r <- fit$resid
p <- shapiro.test(r)$p
ifelse(p>0.05, color <-  "green", color <- "red")
plot <- ggplot(as.data.frame(fit$model), aes(x = r)) +
geom_histogram()
return(plot)
}
fit <- lm(mpg ~ disp, mtcars)
resid.norm(fit)
resid.norm <- function (fit) {
r <- fit$resid
p <- shapiro.test(r)$p
ifelse(p>0.05, color <-  "green", color <- "red")
plot <- ggplot(as.data.frame(fit$model), aes(x = r)) +
geom_histogram(binwidth = 1, fill = color)
return(plot)
}
fit <- lm(mpg ~ disp, mtcars)
resid.norm(fit)
fit <- lm(mpg ~ disp, mtcars, col = 'white')
resid.norm <- function (fit) {
r <- fit$resid
p <- shapiro.test(r)$p
ifelse(p>0.05, color <-  "green", color <- "red")
plot <- ggplot(as.data.frame(fit$model), aes(x = r)) +
geom_histogram(binwidth = 1, fill = color)
return(plot)
}
fit <- lm(mpg ~ disp, mtcars, col = 'white')
resid.norm(fit)
resid.norm <- function (fit) {
r <- fit$resid
p <- shapiro.test(r)$p
ifelse(p>0.05, color <-  "green", color <- "red")
plot <- ggplot(as.data.frame(fit$model), aes(x = r)) +
geom_histogram(binwidth = 1, fill = color)
return(plot)
}
fit <- lm(mpg ~ disp, mtcars, col = 'white')
resid.norm <- function (fit) {
r <- fit$resid
p <- shapiro.test(r)$p
ifelse(p>0.05, color <-  "green", color <- "red")
plot <- ggplot(as.data.frame(fit$model), aes(x = r)) +
geom_histogram(binwidth = 1, fill = color, col = 'white')
return(plot)
}
fit <- lm(mpg ~ disp, mtcars)
resid.norm(fit)
data(mtcars)
fit  <- glm(am ~ disp + vs + mpg, mtcars, family = "binomial")
ggplot(data = ToothGrowth, aes(supp, len, fill = dose))+
geom_boxplot()+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
data("ToothGrowth")
ggplot(data = ToothGrowth, aes(supp, len, fill = dose))+
geom_boxplot()+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
ggplot(data = ToothGrowth, aes(supp, len, fill = dose))+
geom_boxplot()+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
install.packages('ROCR')
library(ROCR)
df <- as.data.frame(read.csv(url('https://stepic.org/media/attachments/lesson/11478/data.csv')))
View(df)
df$rank <- as.factor(df$rank)
df$admit <- as.factor(df$admit)
fit  <- glm(admit ~ gpa*rank, df, family = "binomial")
summary(fit)
df$prob  <- predict(object = fit, type = "response")
df_na <- subset(df, is.na(df$admit))
df_full <- subset(df, is.na(df$admit) == F)
fit  <- glm(admit ~ gpa*rank, df_full, family = "binomial")
summary(fit)
df_full$prob  <- predict(object = fit, type = "response")
pred_fit <- prediction(df_full$prob, df_full$admit)
perf_fit <- performance(pred_fit,"tpr","fpr")
plot(perf_fit, colorize=T , print.cutoffs.at = seq(0,1,by=0.1))
auc  <- performance(pred_fit, measure = "auc")
str(auc)
perf3  <- performance(pred_fit, x.measure = "cutoff", measure = "spec")
perf4  <- performance(pred_fit, x.measure = "cutoff", measure = "sens")
perf5  <- performance(pred_fit, x.measure = "cutoff", measure = "acc")
plot(perf3, col = "red", lwd =2)
plot(add=T, perf4 , col = "green", lwd =2)
plot(add=T, perf5, lwd =2)
legend(x = 0.6,y = 0.3, c("spec", "sens", "accur"),
lty = 1, col =c('red', 'green', 'black'), bty = 'n', cex = 1, lwd = 2)
abline(v= 0.225, lwd = 2)
plot(perf3, col = "red", lwd =2)
plot(add=T, perf4 , col = "green", lwd =2)
plot(add=T, perf5, lwd =2)
legend(x = 0.6,y = 0.3, c("spec", "sens", "accur"),
lty = 1, col =c('red', 'green', 'black'), bty = 'n', cex = 1, lwd = 2)
plot(perf3, col = "red", lwd =2)
plot(add=T, perf4 , col = "green", lwd =2)
plot(add=T, perf5, lwd =2)
abline(v= 0.38, lwd = 2)
abline(v= 0.35, lwd = 2)
abline(v= 0.36, lwd = 2)
plot(perf3, col = "red", lwd =2)
plot(add=T, perf4 , col = "green", lwd =2)
plot(add=T, perf5, lwd =2)
legend(x = 0.6,y = 0.3, c("spec", "sens", "accur"),
lty = 1, col =c('red', 'green', 'black'), bty = 'n', cex = 1, lwd = 2)
abline(v= 0.36, lwd = 2)
plot(perf3, col = "red", lwd =2)
plot(add=T, perf4 , col = "green", lwd =2)
plot(add=T, perf5, lwd =2)
legend(x = 0.6,y = 0.3, c("spec", "sens", "accur"),
lty = 1, col =c('red', 'green', 'black'), bty = 'n', cex = 1, lwd = 2)
abline(v= 0.35, lwd = 2)
df_full$pred_resp  <- factor(ifelse(df_full$prob > 0.35, 1, 0), labels = c("0", "1"))
df_full$correct  <- ifelse(df_full$pred_resp == df_full$admit, 1, 0)
df_full$correct <- as.factor(df_full$correct)
summary(df_full$correct)
df_full$correct <- as.numeric(df_full$correct)
mean(df_full$correct)
df_full$correct  <- ifelse(df_full$pred_resp == df_full$admit, 1, 0)
mean(df_full$correct)
test_df$hon  <- predict(fit, newdata = test_df, type = "response")
df_na$predict <-  predict(fit, newdata = df_na, type = "response")
df_na$resp <-  factor(ifelse(df_na$predict > 0.35, 1, 0), labels = c("0", "1"))
summary(df_na$resp)
df_na$resp <-  factor(ifelse(df_na$predict > 0.4, 1, 0), labels = c("0", "1"))
summary(df_na$resp)
nums = [1,2,3,4]
nums <- [1,2,3,4]
nums <- {1,2,3,4}
nums <- []
nums <- ()
n <- 1
nums <- [1, 2, 3]
nums <- {1, 2, 3}
nums <- (1, 2, 3)
nums <- (1, 2, 3)
c <- {}
d <- c(1,2,3)
d
v <- c[1,2,3,4]
v
v <- [1,2,3,4]
c <- {1,2,3,4}
c <- {1,2,3,4}
c <- {'1,2,3,4'}
c
c <- {'1','2','3','4'}
c <- {'1','2','3','4'}
sessionInfo()
sessionInfo()
sessionInfo()
sessionInfo()
install.packages(c("emmeans", "fontawesome", "ggeffects", "glmnet", "gtable", "pan", "quantreg", "rbibutils", "Rdpack", "sjPlot"))
install.packages(c("emmeans", "fontawesome", "ggeffects", "glmnet", "gtable", "pan", "quantreg", "rbibutils", "Rdpack", "sjPlot"))
setwd("/Users/marianna.tumova/Biostat_2023")
setwd("/Users/marianna.tumova/Desktop/Biostat2023/biostat_homework_092023")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringi)
library(here)
library(flextable)
library(gtsummary)
library(ggplot2)
library(purrr)
library(gridExtra)
cleaned_data %>%
select(!id) %>%
tbl_summary(by = stroke) %>%
add_p(list(all_continuous() ~ "t.test", all_categorical() ~ "fisher.test"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringi)
library(here)
library(flextable)
library(gtsummary)
library(ggplot2)
library(purrr)
library(gridExtra)
path <- here('data', 'raw','healthcare-dataset-stroke-data.csv')
df <- read_csv(path)
head(df)
df <- df %>%
mutate(id = as.character(id), bmi = as.numeric(bmi)) %>%
mutate(across(c(gender, hypertension, heart_disease, ever_married, work_type, Residence_type, smoking_status, stroke), as.factor))# Приведение к нужному типу
cleaned_data <- df %>% select(where(~ (sum(is.na(.)) / nrow(df)) < 0.2)) %>% # Отбор и удаление столбцов,  в которых пропущенных значений более 20%
filter(rowSums(is.na(.)) < length(df) * 0.2) %>% # Отбор и удаление строк, в которых пропущенных значений более 20%. Т.к. количество пропущенных значений и в столюцах и строках было менее 20%, данные не изменились
rename_with(function(x) x %>% stri_replace_all_regex("_", " ", vectorize_all = F)) %>% # Переименование
arrange(desc(age)) # Сортировка данных по возрасту по убыванию
cleaned_data %>% glimpse()
print(paste('Осталось', length(cleaned_data), 'переменных'))
cleaned_data %>% glimpse()
print(paste('Осталось', nrow(cleaned_data), 'случаев'))
duplicates <- cleaned_data %>% filter(duplicated(.))
print(paste('Идентичных строк', nrow(duplicates)))
missing_var <- cleaned_data %>%
summarise_all(~ sum(is.na(.))) %>%
gather('Переменные', 'Пропущенные значения')
missing_var
statistics <- list(
`Количество субъектов` = ~length(.x) %>% as.character(),
`Количество (есть данные)` = ~sum(!is.na(.x)) %>% as.character(),
`Нет данных` = ~sum(is.na(.x)) %>% as.character(),
`Ср. знач.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", mean(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`Станд. отклон.` = ~ifelse(sum(!is.na(.x)) < 3, "Н/П*", sd(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`95% ДИ для среднего` = ~sd(.x, na.rm = TRUE) %>% round(2) %>% as.character(),
`мин. - макс.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(min(.x, na.rm = TRUE) %>% round(2), " - ", max(.x, na.rm = TRUE) %>% round(2))),
`Медиана` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", median(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`Q1 - Q3` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(quantile(.x, 0.25, na.rm = TRUE) %>% round(2), " - ", quantile(.x, 0.75, na.rm = TRUE) %>% round(2)))
)
cleaned_data %>% select(stroke, where(is.numeric)) %>%
group_by(stroke) %>%
summarise(across(where(is.numeric), statistics)) %>%
pivot_longer(!stroke) %>%
separate(name, into = c('Переменная','Статистика'), sep = '_') %>%
rename('Значения' = value) %>%
flextable()
cleaned_data %>%
select(stroke, where(is.factor)) %>%
tbl_summary(by = stroke) %>%
add_ci()
numeric_columns <- cleaned_data %>%
select(where(is.numeric))
plots <- map(names(numeric_columns), function(var) {
ggplot(cleaned_data, aes_string(x = "stroke", y = paste0("`", var, "`"), group = "stroke")) +
geom_boxplot(aes(color = stroke)) +
geom_point(aes(color = stroke), position = position_jitter(width = 0.03), alpha = 0.05) +
scale_color_brewer(type = 'div', palette = 'Set2') +
labs(x = "stroke", y = var) +
ggtitle(paste("Boxplot of", var))
})
grid.arrange(grobs = plots, ncol = 2)
categorical_columns <- cleaned_data %>%
select(where(is.factor))
bars <- map(names(categorical_columns), function(var) {
ggplot(cleaned_data, aes_string(x = "stroke", fill = sprintf("`%s`", var))) +
geom_bar(position = "dodge") +
labs(x = "stroke", y = "Frequency", fill = var) +
ggtitle(paste("Distribution of", var, "by stroke"))
})
bars
# Выбор оптимального способа визуализации категориальных переменных зависит от задачи, которую мы решаем. Выбор в пользу столбчатой диаграммы был сделан в силу хорошей демонстации распределения переменных в группах.
numeric_columns <- cleaned_data %>%
select(where(is.numeric))
qq_plots <- lapply(names(numeric_columns), function(var) {
ggplot(cleaned_data, aes(sample = .data[[var]])) +
geom_qq() +
labs(title = paste("Q-Q Plot of", var))
})
print(qq_plots)
# Ни один метод не подтверждает нормальность окончательно, и у разных методов есть свои преимущества и ограничения. Визуальные методы нагляднее для быстрой оценки характера распределения, а также не имеют ограничений по размеру выборкм.
#Распеределение возраста является равномерным и напоминает распределение Стьюдента. Ср. уровень глю имеет двугорбое распределение, а ИМТ напоминает экспоненциальное распределение.
cleaned_data %>%
select(!id) %>%
tbl_summary(by = stroke) %>%
add_p(list(all_continuous() ~ "t.test", all_categorical() ~ "fisher.test"))
#  При проведении тестов Хи-квадрат, если ожидаемое количество наблюдений в одном из ячеек меньше 5, точный тест Фишера предпочтительнее.
# Для сравнения средних в группах используется  Welch Two Sample t-test, который позволяет сравнивать группы с неравными дисперсиями. Учитывая большой обхем выборки тест должен быть устойчив от отклонений от нормальности.
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringi)
library(here)
library(flextable)
library(gtsummary)
library(ggplot2)
library(purrr)
library(gridExtra)
head(df)
cleaned_data %>% glimpse()
print(paste('Осталось', nrow(cleaned_data), 'случаев'))
